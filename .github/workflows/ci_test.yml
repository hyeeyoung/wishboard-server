# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ServerCICD
on:
  push:
  pull_request:
    branches: 
      - main
      - dev
      
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x] # 개발환경과 동일하게 맞춤
        
    steps:
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code. 
        uses: actions/checkout@v2
        
      # node 설치 및 버전 확인한다.
      - name: Node.js ${{ matrix.node-version }} install
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check Npm -v
        run: npm -v   
      # 캐시 작업 추가(이전에 dependency를 설치했다면 캐시를 이용하도록
#       - name: Cache node modules
#         id: node-cache
#         uses: actions/cache@v2
#         env: 
#           cache-name: cache-node-modules
#         with:
#           path: ~./npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-${{ env.cache-name }}-
#             ${{ runner.os }}-build-
#             ${{ runner.os }}-
      # 직업폴더를 설정 한 수 의존 파일을 설치한다.
#       - name: Install Dependencies
#         if: steps.node-cache.outputs.cache-hit != 'true'
#         working-directory: .
#         # --frozen-lockfile는 install 시 yarn.lock파일 생성 X, 업데이트 필요 시 실패
#         run: yarn install --frozen-lockfile
#       # Build한다
#       - name: Build # Fastify Build and Start
#         working-directory: .
#         run: yarn run build

        # npm ci를 통해 npm install 진행
      - name: npm CI
        run: npm ci
        
        #lint 통과 확인
      - name: check ESLint
        run: npm run lint
        
        # CI 통과 시 build하여 server.js 파일 생성
      - name: run build (dev)
        if: ${{ github.ref == 'refs/heads/dev' }} 
        run: npm run build --if-present
        
      - name: run build (main)
        if: ${{ github.ref == 'refs/heads/main' }} 
        run: npm run build:production --if-present
        
      #CD
      # build 파일을 ec2에 올리기
#       - name: build file upload to ec2 
#         uses: garygrossgarten/github-action-scp@release
#         with:
#             local: ./dist
#             remote: /home/ubuntu/server-wishboard/dist/
#             host: ${{ secrets.REMOTE_IP }}
#             username: ${{ secrets.REMOTE_SSH_ID }}
#             privateKey: ${{ secrets.REMOTE_SSH_PK }}
#             port: ${{ secrets.REMOTE_SSH_PORT }}
#             recursive: true
#       - name: ec2 update
#         uses: appleboy/ssh-action@master
#         with:
#            host: ${{ secrets.REMOTE_IP }}
#            username: ${{ secrets.REMOTE_SSH_ID }}
#            key: ${{ secrets.REMOTE_SSH_PK }}
#            script: pm2 restart 0 --update-env
