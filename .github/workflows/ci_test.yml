# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ServerCICD
on:
  push:
  pull_request:
    branches: 
      - main
      - dev
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #CI
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code. # node 버전을 확인한다.
        uses: actions/checkout@v2
      - name: Check Node v
        run: node -v
      # 캐시 작업 추가(이전에 dependency를 설치했다면 캐시를 이용하도록
#       - name: Cache node modules
#         id: node-cache
#         uses: actions/cache@v2
#         env: 
#           cache-name: cache-node-modules
#         with:
#           path: ~./npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-${{ env.cache-name }}-
#             ${{ runner.os }}-build-
#             ${{ runner.os }}-
      # 직업폴더를 설정 한 수 의존 파일을 설치한다.
      - name: Install Dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: .
        # --frozen-lockfile는 install 시 yarn.lock파일 생성 X, 업데이트 필요 시 실패
        run: yarn install --frozen-lockfile
      # Build한다
      - name: Build # Fastify Build and Start
        working-directory: .
        run: yarn run build
        
      #CD
      # build 파일을 ec2에 올리기
#       - name: build file upload to ec2 
#         uses: garygrossgarten/github-action-scp@release
#         with:
#             local: ./dist
#             remote: /home/ubuntu/server-wishboard/dist/
#             host: ${{ secrets.REMOTE_IP }}
#             username: ${{ secrets.REMOTE_SSH_ID }}
#             privateKey: ${{ secrets.REMOTE_SSH_PK }}
#             port: ${{ secrets.REMOTE_SSH_PORT }}
#             recursive: true
#       - name: ec2 update
#         uses: appleboy/ssh-action@master
#         with:
#            host: ${{ secrets.REMOTE_IP }}
#            username: ${{ secrets.REMOTE_SSH_ID }}
#            key: ${{ secrets.REMOTE_SSH_PK }}
#            script: pm2 restart 0 --update-env
