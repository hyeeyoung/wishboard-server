# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ServerCICD
on:
  push:
  pull_request:
    branches: 
      - main
      - dev
      
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.2] # 개발환경과 동일하게 맞춤
        
    steps:
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code. 
        uses: actions/checkout@v2
        
      # node 설치 및 버전 확인한다.
      - name: Node.js ${{ matrix.node-version }} install
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check Npm -v
        run: npm -v 

        # npm ci를 통해 npm install 진행
      - name: Npm CI
        run: npm ci
        
        #lint 통과 확인
      - name: Check ESLint
        run: npm run lint
      
        # .env 파일 생성
      - name : Create .env file
        run : |
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          
          echo FIREBASE_TYPE=${{ secrets.FIREBASE_TYPE }} >> .env
          echo FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} >> .env
          echo FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }} >> .env
          echo FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} >> .env
          echo FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} >> .env
          echo FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }} >> .env
          echo FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }} >> .env
          echo FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }} >> .env
          echo FIREBASE_AUTH_PROVIDER_X509_CERT_URI=${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URI }} >> .env
          echo FIREBASE_CLIENT_X509_CERT_URI=${{ secrets.FIREBASE_CLIENT_X509_CERT_URI }} >> .env
          
          echo WISHBOARD_GMAIL_ID=${{ secrets.WISHBOARD_GMAIL_ID }} >> .env
          echo WISHBOARD_GMAIL_PW=${{ secrets.WISHBOARD_GMAIL_PW }} >> .env
          
          echo JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} >> .env
        
        # CI 통과 시 build하여 server.js 파일 생성
      - name: Run build (main <- dev)
        if: ${{ github.ref == 'refs/heads/main' }} 
        run: |
          npm run build:production --if-present
        
      - name: Run build (dev <- *)
        run: |
          npm run build --if-present

      - name: Copy ecosystem.config.js
        run: |
          cp ./ecosystem.config.js ./dist
          ls 
          ls ./dist

      - name: Sharing files between jobs.
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:  
      # build job에서 빌드한 파일(./dist/server.js) 가져오기
      - name: Sharing files between jobs.
        uses: actions/download-artifact@v1
        with:
          name: dist
      # aws s3에 빌드 파일 저장
      # ** 파일 이름이 동일해서 알아서 덮임
      - name : Build file upload to S3 and PM2 script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
            --recursive \
            --region ap-northeast-2 \
            dist s3://wishboard-server-build
      # aws ec2에 접속
      - name : Connect and Build file download to EC2 and PM2 script
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USRENAME }}
          script: |
            pwd
            cd ./wishboard-server-product
            aws s3 cp s3://wishboard-server-build ./dist --recursive 
        # ** pm2로 실행 시키는 부분 추가 **