# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ServerCICD
on:
  push:
    branches: 
      - dev
  pull_request:
    branches: 
      - main
      - dev
      
jobs:
  CICD:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.2] # 개발환경과 동일하게 맞춤
        
    steps:
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code. 
        uses: actions/checkout@v2
        
      # node 설치 및 버전 확인한다.
      - name: Node.js ${{ matrix.node-version }} install
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check Npm -v
        run: npm -v 

        # npm ci를 통해 npm install 진행
      - name: Npm CI
        run: npm ci
        
        #lint 통과 확인
      - name: Check ESLint
        run: npm run lint
      
        # .env 파일 생성
      - name : Create .env file
        run : |
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          
          echo WISHBOARD_GMAIL_ID=${{ secrets.WISHBOARD_GMAIL_ID }} >> .env
          echo WISHBOARD_GMAIL_PW=${{ secrets.WISHBOARD_GMAIL_PW }} >> .env
          
          echo JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} >> .env

          echo SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }} >> .env
        
        # main 브랜치에 대한 PR만 빌드하여 S3에 업로드
      - name: Run build (main)
        if: ${{ github.base_ref == 'main' }} 
        run: |
          echo NODE_ENV="production" >> .env
          npm run build:production --if-present 

      - name: Copy ecosystem.config.js
        if: ${{ github.base_ref == 'main' }} 
        run: |
          cp ./ecosystem.config.js ./dist

      # aws s3에 빌드 파일 저장
      - name : Build file upload to S3 and PM2 script
        if: ${{ github.base_ref == 'main' }} 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
            --recursive \
            --region ap-northeast-2 \
            dist s3://wishboard-server-build

  #** artifact 저장 기한을 정했지만 요금 제한으로 job간 이동 없이 바로 업로드 하도록 코드 수정
  # deploy:
  #   needs: build
  #   if: ${{ github.base_ref == 'main' }} 
  #   runs-on: ubuntu-latest
  #   steps:  
  #     # build job에서 빌드한 파일(./dist/server.js) 가져오기
  #     - name: Sharing files between jobs.
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist
  #     # aws s3에 빌드 파일 저장
  #     # ** 파일 이름이 동일해서 알아서 덮임
  #     - name : Build file upload to S3 and PM2 script
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         mkdir dist
  #         mv ecosystem.config.js server.js server.js.LICENSE.txt ./dist
  #         ls -al
  #         aws s3 cp \
  #           --recursive \
  #           --region ap-northeast-2 \
  #           dist s3://wishboard-server-build
        # ** time out 문제로 우선 주석처리 후 직접 진행으로 변경    
      # # aws ec2에 접속
      # - name : Connect and Build file download to EC2 and PM2 script
      #   uses: appleboy/ssh-action@master
      #   with:
      #     key: ${{ secrets.AWS_EC2_SSH_KEY }}
      #     host: ${{ secrets.AWS_HOST }}
      #     username: ${{ secrets.AWS_USRENAME }}
      #     script: |
      #       pwd
      #       cd ./wishboard-server-product
      #       ./pm2-deploy.sh
        
